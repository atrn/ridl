#include <array>
#include <cstddef>
#include <cstdint>
#include <string>
#include <vector>

namespace {{.PackageName}}
{

{{range .Enums -}}
enum class {{.Type.Name}} : {{.Type.TypeName}}
{
{{if .IsDense}}
{{- range .Enumerators}}
    {{.Name}},
{{- end}}
{{else}}
{{- range .Enumerators}}
    {{.Name}} = {{.Value}},
{{- end}}
{{- end}}
};
{{end}}

{{range .Decls -}}
    {{- if .IsConst -}}
        {{- if not .IsEnumerator}}
        const {{cpptype .Object.Type.String}} {{.Name}} = {{.Value}};
        {{end}}
    {{- else if .IsTypedef -}}
        {{- if not .IsEnum}}
        {{- if .IsPointer }}
        using {{.Name}} = std::optional<{{cpptype .TypeName}}>;
        {{- else -}}
        using {{.Name}} = {{cpptype .TypeName}};
        {{- end}}
        {{- end}}
    {{- else if .IsArray -}}
        {{if .IsVariableLength}}
        using {{.Name}} = std::vector<{{cpptype .Type}}>;
        {{else}}
        using {{.Name}} = std::array<{{cpptype .ElTypeName}}, {{.Length}}>;
        {{end}}
    {{- else if .IsStruct -}}
        struct {{.Name}}
        {
        {{- range .Fields -}}
            {{- if ispointer .Type }}
            std::optional<{{cpptype .TypeName | deref | cpptype}}> _{{decap .Name}};
            {{- else}}
            {{- cpptype .TypeName}} _{{decap .Name}};
            {{- end}}
        {{- end -}}
        };
    {{- else if .IsMap -}}
        map {{.Name}}
    {{- else if .IsInterface -}}
        {{$interface := .Name}}

        class {{.Name}}
        {
        public:
        {{range .Methods}}
            {{- if .Results -}}
                {{- $n := len .Results}}
                {{if gt $n 1}}
                struct {{.Name}}Result
                {
                {{- range .Results}}
                    {{cpptype .TypeName}} _{{decap .Name}};
                {{- end}}
                };
                {{end}}
            {{end}}
        {{end}}
        public:
            virtual ~{{.Name}}() = default;
        {{- range .Methods}}
            virtual
            {{- if .Results -}}
                {{- $n := len .Results}}
                {{if eq $n 1}}{{$val := index .Results 0}}{{restype $val.Type}}{{else}}{{.Name}}Result{{end -}}
            {{else}}
               void
            {{- end}}
            {{.Name}}
            (
            {{- range $index, $arg := .Args -}}
            {{- if eq $index 0}}{{else}}, {{end -}}
            {{$argsize := sizeof $arg.Object.Type}}
            {{- if gt $argsize 32}}
            const {{$arg.TypeName}} & {{$arg.Name}}
            {{- else -}}
            {{argtype $arg.TypeName}} {{$arg.Name}}
            {{- end -}}

            {{- end -}}
            ) = 0;
        {{- end}}
        };
    {{- else -}}
       something else {{.Name}}
    {{- end}}
{{end}}

} // namespace {{.PackageName}}

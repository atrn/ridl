// -*- mode:go-template -*-

// -*- mode:c++ -*-

// Generated from {{.Filename}} {{.BuildTime}}

#include <array>
#include <cstdint>
#include <string>
#include <vector>
#include <map>

{{- range .Imports}}
#include "{{.}}.hpp"
{{end}}

namespace {{.PackageName}} {

{{- if .Typedefs}}

// Typedefs

{{range .Typedefs}}
using {{.Name}} = {{cpptype .Alias}};
{{- end}}
{{- end}}

{{- if .Constants}}

// Constants

{{range .Constants}}
const {{cpptype .Type}} {{.Name}} = {{.Value}};
{{- end}}
{{- end}}

{{- if .StructTypes}}

// Structs

{{range .StructTypes}}
struct {{.Name}} {
{{- range .Fields}}
    {{$e:=eltype .Type}}{{cpptype $e}} _{{.Name}} {{dims .Type}};
{{- end}}
};
{{end}}
{{- end}}

{{- if .ArrayTypes}}

// Arrays

{{- range .ArrayTypes}}
using {{.Name}} = {{if eq .Size 0}}std::vector<{{cpptype .ElemType}}>{{else}}std::array<{{cpptype .ElemType}}, {{.Size}}>{{end}};
{{- end}}
{{- end}}

{{- if .MapTypes}}

// Maps

{{- range .MapTypes}}
using {{.Name}} = std::map<{{restype .KeyType}}, {{restype .Type}}>;
{{- end}}
{{- end}}

{{- if .Interfaces}}
// Interface arguments and results
{{range .Interfaces -}}
{{$interface := .Name}}
{{- range .Methods -}}
{{- if .Results}}
{{$n := len .Results}}
{{- if eq $n 1 -}}
{{- else -}}
struct {{$interface}}_{{.Name}}_Result {
{{- range $index, $arg := .Results}}
    {{restype $arg.Type}} _{{$arg.Name}};
{{- end}}
};
{{end -}}
{{- end}}
{{- end}}
{{- end}}

// Interfaces
{{- range .Interfaces}}
{{$interface := .Name}}

class {{$interface}} {
public:
    virtual ~{{.Name}}();
{{- range .Methods}}
    virtual
{{- if .Results -}}
{{- $n := len .Results}}
 {{if eq $n 1}}{{$val := index .Results 0}}{{restype $val.Type}}{{else}}{{$interface}}_{{.Name}}_Result{{end -}}
{{else}}
 void
{{- end}} {{.Name}}({{- range $index, $arg := .Args}}{{if eq $index 0}}{{else}}, {{end}}{{argtype $arg.Type}} {{$arg.Name}}{{end}}) = 0;
{{- end}}
};
{{- end}}
{{- end}}

} // namespace {{.PackageName}}
